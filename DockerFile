# Use Python 3.9 slim as base image for better compatibility with face_recognition
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies required for OpenCV, face_recognition, and dlib
RUN apt-get update && apt-get install -y \
    # Build tools
    build-essential \
    cmake \
    pkg-config \
    # Image processing libraries
    libjpeg-dev \
    libtiff5-dev \
    libpng-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    # GUI libraries (for OpenCV display functions)
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    # Face recognition dependencies
    libboost-all-dev \
    # Video device access
    v4l-utils \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip and install wheel
RUN pip install --upgrade pip setuptools wheel

# Copy requirements first for better Docker layer caching
COPY requirements.txt .

# Install Python dependencies
# Install dlib first as it's the most complex dependency
RUN pip install --no-cache-dir dlib==19.24.1 \
    && pip install --no-cache-dir -r requirements.txt

# Create necessary directories
RUN mkdir -p /app/student-images

# Copy application files
COPY main.py .
COPY student-images/ ./student-images/

# Create a non-root user for security
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Expose any ports if needed (not required for this app)
# EXPOSE 8000

# Health check to verify the application can start
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import cv2, face_recognition, numpy; print('Dependencies OK')" || exit 1

# Set the default command
CMD ["python", "main.py"]

# ================================
# Build and Run Instructions
# ================================
#
# To build the Docker image:
# docker build -t face-recognition-attendance .
#
# To run the container with camera access:
# docker run -it --rm \
#   --device=/dev/video0:/dev/video0 \
#   -v $(pwd)/attendance.json:/app/attendance.json \
#   -v $(pwd)/student-images:/app/student-images \
#   face-recognition-attendance
#
# For Windows with WSL2:
# docker run -it --rm \
#   --device=/dev/video0:/dev/video0 \
#   -v ${PWD}/attendance.json:/app/attendance.json \
#   -v ${PWD}/student-images:/app/student-images \
#   face-recognition-attendance
#
# Notes:
# - The --device flag gives container access to your webcam
# - The -v flags mount your local directories to persist data
# - Add -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix for GUI on Linux
# ================================